<?php
class Semtech_Service_Report_Technology_Html
{
	
	/**
	 * @var Zend_Db_Table_RowSet
	 */
	private $_technologies;
	
	/**
	 * @var DOMDocument
	 */
	private $_doc;
	
	/**
	 * @var DOMElement
	 */
	private $_root;
	
	/**
	 * @var DOMElement
	 */
	private $_head;
	
	/**
	 * @var DOMElement
	 */
	private $_body;
	
	public function __construct()
	{
		$technologies = new Semtech_Model_DbTable_Technologies();
		$this->_technologies = $technologies->fetchAll($technologies->select()->order("name"));

		$this->_doc = new DOMDocument("1.0", "utf-8");
		$this->_root = $this->_doc->createElement("html");
		
		$this->_createHead();
		$this->_createBody();
	}
	
	public function render()
	{
		$this->_root->appendChild($this->_head);
		$this->_root->appendChild($this->_body);
		
		$this->_doc->appendChild($this->_root);
		
		return $this->_doc->saveHtml();
	}
	
	private function _createHead()
	{
		$this->_head = $this->_doc->createElement("head");	
	
		$headtitle = $this->_doc->createElement("title", "Semtech Survey :: Technology Report");
		$headstyle = $this->_doc->createElement("style");
		$styletypeattr = $this->_doc->createAttribute("type");
		$styletypeattr->appendChild($this->_doc->createTextNode("text/css"));
		$headstyle->appendChild($this->_doc->createTextNode("html * { font-family: helvetica; }"));
		$headstyle->appendChild($styletypeattr);
		
		$this->_head->appendChild($headtitle);
		$this->_head->appendChild($headstyle);
	}
	
	private function _createBody()
	{
		$this->_body = $this->_doc->createElement("body");
		
		$this->_createIntroduction();
		$this->_createDocument();
	}
	
	private function _createIntroduction()
	{
		$semtechsurveylink = $this->_doc->createElement("a", "Semtech Survey");
		$href = $this->_doc->createAttribute("href");
		$href->value = "/";
		$semtechsurveylink->appendChild($href);
		
		$title = $this->_doc->createElement("h1", "Semtech Survey :: Technology Report");
		$this->_body->appendChild($title);
		$this->_body->appendChild($this->_doc->createElement("p", "&copy; ".date("Y")." University of Southampton"));
		
		$introduction = $this->_doc->createElement("div");
		$introduction->appendChild($this->_doc->createElement("h2", "Introduction"));
		$introduction->appendChild($this->_doc->createTextNode("This report has been generated by the "));
		$introduction->appendChild($semtechsurveylink);
		$introduction->appendChild($this->_doc->createTextNode(". The following list contains all of the technologies that have been added thus far."));
		$this->_body->appendChild($introduction);
		$this->_body->appendChild($this->_createHr());
	}
	
	private function _createHr()
	{
		return $this->_doc->createElement("hr");
	}
	
	private function _createDocument()
	{
		foreach ($this->_technologies as $technology)
		{
			$technologytitle = $this->_doc->createElement("h2", $technology->name);
			$technologydesc = $this->_doc->createElement("p");
			$technologydesc->appendChild($this->_doc->createElement("pre", wordwrap(preg_replace("/&/", "&amp;", stripslashes(utf8_encode($technology->description))), 100, "\n", false)));
			$technologylicense = $this->_doc->createElement("p", "License: ".$technology->license);
			$revisionsheading = $this->_doc->createElement("h3", "Tags");
			
			$technologydiv = $this->_doc->createElement("div");
			$technologydiv->appendChild($technologytitle);
			$technologydiv->appendChild($technologydesc);
			$technologydiv->appendChild($technologylicense);
			$technologydiv->appendChild($revisionsheading);
			
			$user = null;
			
			$taggroups = array();
			
			foreach ($technology->getRevisions() as $revision)
			{
				if ($revision->isOriginal()) {
					$user = $revision->createdby;
					continue;
				}
				
				if ($revision->createdby = $user) {
					$tt = new Semtech_Model_DbTable_Tags();
					$tagcategories = $tt->fetchAll($tt->select()->group("category"));
					foreach ($tagcategories as $category)
					{
						
						$tct = new Semtech_Model_DbTable_TagCategories();
						$category = $tct->fetchRow($tct->select()->where("name = ?", $category->category));
						
						if (!isset($taggroups[$category->supercategory])) {
							$taggroups[$category->supercategory] = $this->_doc->createElement("div");
							$taggroups[$category->supercategory]->appendChild($this->_doc->createElement("h4", $category->supercategory));	
						}
						$taggroup = $taggroups[$category->supercategory];
						
						$tags = array();
						foreach ($revision->getTags($category->name) as $tag)
						{
							$tags[] = $tag->tag;	
						}
						$tagstring = join(", ", $tags);
						
						// TODO: This is a rather ugly way of doing things. Come up with a neater solution.
						switch ($category->name) {
							case "Actors":
								$categoryname = "Users";
								break;
							case "Aimed At":
								$categoryname = "Education Sector";
								break;
							case "Individual Activities":
								$categoryname = "Supported Individual Activities";
								break;
							case "Collaborative Activities":
								$categoryname = "Supported Collaborative Activities";
								break;
							case "Value Added":
								$categoryname = "Values Of Technologies";
								break;
							default;
							$categoryname = $category->name;
						}
						
						if (strlen($tagstring) > 0) {
							$tagdom = $this->_doc->createElement("p", $categoryname.": ".$tagstring);
							$taggroup->appendChild($tagdom);
						}
					}
					
					foreach (array_keys($taggroups) as $taggroup)
					{
						$technologydiv->appendChild($taggroups[$taggroup]);
					}
					
					if (count($revision->getActivityLevels()))
					{
						$activitytable = $this->_doc->createElement("table");
						$headerrow = $this->_doc->createElement("tr");
						$headerrow->appendChild($this->_doc->createElement("th", "Users"));
						$headerrow->appendChild($this->_doc->createElement("th", "Annotation Level"));
						$headerrow->appendChild($this->_doc->createElement("th", "Creation Level"));
						$activitytable->appendChild($headerrow);
						
						foreach ($revision->getActivityLevels() as $actor => $levelarray)
						{
							$tablerow = $this->_doc->createElement("tr");
							$tablerow->appendChild($this->_doc->createElement("td", $actor));
							$tablerow->appendChild($this->_doc->createElement("td", $levelarray['annotation']));
							$tablerow->appendChild($this->_doc->createElement("td", $levelarray['creation']));
							$activitytable->appendChild($tablerow);
						}
						
						$technologydiv->appendChild($activitytable);
					}
					break;	
				}
				
			}
			
			if ($technology->getRelations()->count())
			{
				$technologydiv->appendChild($this->_doc->createElement("h3", "Relations"));
				$relationlist = $this->_doc->createElement("ul");
				foreach ($technology->getRelations() as $relation) 
				{
					$relationlist->appendChild($this->_doc->createElement("li", Semtech_Model_Technology::getTechnology($relation->object)->name." ".Semtech_Model_RelationDefinition::getRelationDefinition($relation->relation)->text." ".Semtech_Model_Technology::getTechnology($relation->subject)->name));
				}
				$technologydiv->appendChild($relationlist);
			}
			
			$technologylink = $this->_doc->createElement("a", preg_replace("/&/", "&amp;", $technology->url));
			$technologyhref = $this->_doc->createAttribute("href");
			$technologyhref->appendChild($this->_doc->createTextNode($technology->url));
			$technologylink->appendChild($technologyhref);
			$technologydiv->appendChild($technologylink);
			
			$this->_body->appendChild($technologydiv);
			$this->_body->appendChild($this->_createHr());
		}
	}
	
}